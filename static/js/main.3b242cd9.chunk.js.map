{"version":3,"sources":["App.js","index.js"],"names":["setRowDataArray","a","axios","get","then","response","data","dbAddNewRow","itemName","qty","payload","name","post","result","console","log","row2update","uri","put","myId","delete","deletedCount","App","useState","rowDataArray","newId","newRow","_id","updateRow","updatedRow","updatedItems","map","row","dbUpdateRow","removeRow","id2delete","filter","dbRemoveRow","useEffect","dbGetAllData","className","InputForm","addNewRow","oneRow","ListRow","remove","update","Footer","initialVal","state","setState","useToggle","isEditing","toggle","EditRowForm","aria-label","onClick","useInputState","handleNameChange","resetNameField","handleQtyChange","resetQtyField","textInput","React","createRef","onSubmit","e","preventDefault","current","focus","type","value","placeholder","onChange","label","autoFocus","ref","handleChange","reset","setValue","target","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b242cd9.chunk.js","sourcesContent":["// This React app maintains a simple inventory list.\r\n// The design goal was to put all of the functions in\r\n// a single file to help study how they work.\r\n\r\n// Mongodb/Atlas storage is accessed via a Heroku api.\r\n// by John Phillips on 2021-02-24 revised 2021-02-25\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Style.css\";\r\n\r\n//\r\n// ***** API functions *******************************************************\r\n// These functions call the api running on a Heroku server\r\n// and carries out the desired interaction with a mongodb Atlas database.\r\n\r\n// const dbGetAllData = async (setRowDataArray) => { // alternative syntax\r\nasync function dbGetAllData(setRowDataArray) {\r\n  await axios\r\n    .get(\"https://inventorylistapi.herokuapp.com/items\")\r\n    .then((response) => {\r\n      setRowDataArray(response.data);\r\n    });\r\n}\r\n\r\nasync function dbAddNewRow(itemName, qty) {\r\n  const uri = \"https://inventorylistapi.herokuapp.com/items\";\r\n  const payload = { name: itemName, qty: qty };\r\n  let result = await axios.post(uri, payload);\r\n  console.log(`db add new row res.data=${result.data}`);\r\n  return result.data;\r\n}\r\n\r\nasync function dbUpdateRow(row2update, qty) {\r\n  // for now update based on item name instead of id... fix api later\r\n  const uri = \"https://inventorylistapi.herokuapp.com/items/\" + row2update.name;\r\n  const payload = { qty: qty };\r\n  let result = await axios.put(uri, payload);\r\n  return result.data;\r\n}\r\n\r\nasync function dbRemoveRow(myId) {\r\n  const uri = \"https://inventorylistapi.herokuapp.com/items/\" + myId;\r\n  let result = await axios.delete(uri);\r\n  console.log(`db remove=${result.data.deletedCount}`); // make sure it is 1\r\n  return result.data.deletedCount;\r\n}\r\n// ***** End API functions ***************************************************\r\n//\r\n\r\n//\r\n// ***** Main React function *************************************************\r\nexport default function App() {\r\n  console.log(\"start of function App.js\");\r\n\r\n  // Create the state array and a function to change the data.\r\n  // rowDataArray contains all of our list data organized by row.\r\n  let [rowDataArray, setRowDataArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"first useEffect -- run one time to get the starting data\");\r\n    dbGetAllData(setRowDataArray);\r\n    console.log(rowDataArray);\r\n    // ignore the following [] warning\r\n  }, []); // actually need the empty dependency array [] so only executed once\r\n\r\n  // Any time rowDataArray changes then this hook will automatically be called.\r\n  // Uncomment the following to console view the rowDataArray as it is updated.\r\n  useEffect(() => {\r\n    console.log(\"second useEffect runs whenever the rowDataArray changes\");\r\n    console.log(rowDataArray);\r\n  }, [rowDataArray]);\r\n\r\n  async function addNewRow(itemName, qty) {\r\n    // add row to db and get new id back\r\n    let newId = await dbAddNewRow(itemName, qty);\r\n    const newRow = { _id: newId, name: itemName, qty: qty };\r\n    setRowDataArray([...rowDataArray, newRow]);\r\n  }\r\n\r\n  function updateRow(row2update, qty) {\r\n    // just update qty and leave name and id as is\r\n    const updatedRow = { _id: row2update._id, name: row2update.name, qty: qty };\r\n    // check each row for the matching id and if found return the updated row\r\n    const updatedItems = rowDataArray.map((row) => {\r\n      if (row._id === row2update._id) {\r\n        return updatedRow;\r\n      }\r\n      return row;\r\n    });\r\n    setRowDataArray(updatedItems);\r\n    dbUpdateRow(row2update, qty);\r\n  }\r\n\r\n  function removeRow(id2delete) {\r\n    // filter out any row where the ids don't match\r\n    const updatedItems = rowDataArray.filter((row) => row._id !== id2delete);\r\n    setRowDataArray(updatedItems);\r\n    dbRemoveRow(id2delete);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"Wrapper\">\r\n        <h1>Inventory List</h1>\r\n        <p>\r\n          React App -&gt; Express / Node server on Heroku -&gt; Mongodb / Atlas\r\n        </p>\r\n        <InputForm addNewRow={addNewRow} className=\"InputForm\" />\r\n        <div className=\"ListContainer\">\r\n          <ul>\r\n            {rowDataArray.map((oneRow) => (\r\n              <li key={oneRow._id}>\r\n                <ListRow\r\n                  oneRow={oneRow}\r\n                  remove={removeRow}\r\n                  update={updateRow}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n// ***** End Main function ***************************************************\r\n// export default InventoryListNoStorage;\r\n\r\n// Displays a single row of data with delete and edit buttons.\r\n// It needs to be a separate function so that each row can\r\n// have its own isEditing toggle.\r\nfunction ListRow({ oneRow, remove, update }) {\r\n  const [isEditing, toggle] = useToggle(false);\r\n  return (\r\n    <div>\r\n      {isEditing ? (\r\n        <EditRowForm oneRow={oneRow} update={update} toggle={toggle} />\r\n      ) : (\r\n        // span to wrap elements and later add style\r\n        <span>\r\n          <span>\r\n            {oneRow.name} : {oneRow.qty}\r\n          </span>\r\n          <span className=\"ButtonGroup\">\r\n            <button\r\n              className=\"Button\"\r\n              aria-label=\"Delete\"\r\n              onClick={() => remove(oneRow._id)}\r\n            >\r\n              Delete\r\n            </button>\r\n            <button className=\"Button\" aria-label=\"Edit\" onClick={toggle}>\r\n              Edit\r\n            </button>\r\n          </span>\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// display's empty item name and qty text fields; when submitted it\r\n// adds a new row to the data array\r\nfunction InputForm({ addNewRow }) {\r\n  const [name, handleNameChange, resetNameField] = useInputState(\"\");\r\n  const [qty, handleQtyChange, resetQtyField] = useInputState(\"\");\r\n\r\n  // next 2 lines enable the focus to return to the first textbox\r\n  // after the 'add new item' button is clicked\r\n  const textInput = React.createRef();\r\n  const focus = () => textInput.current.focus();\r\n\r\n  return (\r\n    <form\r\n      className=\"InputForm\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        addNewRow(name, qty);\r\n        resetNameField();\r\n        resetQtyField();\r\n        focus(); // returns focus to first textbox after submit\r\n      }}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        placeholder=\"Type new item name\"\r\n        onChange={handleNameChange}\r\n        label=\"Add New Item\"\r\n        autoFocus\r\n        ref={textInput} // returns focus to first textbox after submit\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        value={qty}\r\n        placeholder=\"Type new quantity\"\r\n        onChange={handleQtyChange}\r\n        label=\"Add New Quantity\"\r\n      />\r\n      <button type=\"submit\">Add new item</button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// allows user to update an item's quantity\r\nfunction EditRowForm({ oneRow, update, toggle }) {\r\n  const [value, handleChange, reset] = useInputState(oneRow.qty);\r\n  return (\r\n    <form\r\n      className=\"InputForm\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        update(oneRow, value);\r\n        reset();\r\n        toggle();\r\n      }}\r\n    >\r\n      {oneRow.name}\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        label=\"Update quantity\"\r\n        autoFocus={true}\r\n      />\r\n      Press Enter to Update\r\n    </form>\r\n  );\r\n}\r\n\r\n// utility function to toggle a state from false to true and back\r\nfunction useToggle(initialVal = false) {\r\n  const [state, setState] = useState(initialVal);\r\n  const toggle = () => setState(!state);\r\n  return [state, toggle];\r\n}\r\n\r\n// utility functions to fill in a text field as the user types;\r\n// resets the text field to \"\" after the user presses enter\r\nfunction useInputState(initialVal) {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = (e) => setValue(e.target.value);\r\n  const reset = () => setValue(\"\");\r\n  return [value, handleChange, reset];\r\n}\r\n\r\nfunction Footer() {\r\n  return (\r\n    <p className=\"Footer\">\r\n      Simple Inventory List with Mongodb Atlas storage by John Phillips on\r\n      Febuary 24, 2021. Source at{\" \"}\r\n      <a href=\"https://github.com/profphillips/inventorylistfrontendapi\">\r\n        https://github.com/profphillips/inventorylistfrontendapi\r\n      </a>\r\n      . Live page at{\" \"}\r\n      <a href=\"https://profphillips.github.io/inventorylistfrontendapi/\">\r\n        https://profphillips.github.io/inventorylistfrontendapi/\r\n      </a>\r\n      .\r\n    </p>\r\n  );\r\n}\r\n\r\n// ***** End Of File *********************************************************\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// import InventoryListLocalStorage from \"./InventoryListLocalStorage\";\nconsole.log(\"in index.js\")\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}